{"version":3,"sources":["scripts/game.js"],"names":["Game","score","state","field","initialCellNumber","i","randomEmptyCell","row","col","reduce","prev","curr","concat","emptyCells","forEach","rowIndex","cell","columnIndex","push","length","Error","randomIndex","Math","floor","random","isCollapsed","collapseCells","isMoved","moveCells","havePossibleMove","rotateField","moveLeft","emptyCell","findIndex","el","wasCollapsed","index","j","reverse","cellsValues","some","equalRight","equalBottom","undefined","module","exports"],"mappings":"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","file":"game.a7a27e54.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor() {\n    this.score = 0;\n    this.state = 'started';\n\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    const initialCellNumber = 2;\n\n    for (let i = 0; i < initialCellNumber; i++) {\n      const [row, col] = this.randomEmptyCell();\n\n      this.field[row][col] = 2;\n    }\n  }\n\n  cellsValues() {\n    return this.field.reduce((prev, curr) => prev.concat(curr), []);\n  }\n\n  randomEmptyCell() {\n    const emptyCells = [];\n\n    this.field.forEach((row, rowIndex) => row.forEach((cell, columnIndex) => {\n      if (!cell) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    }));\n\n    if (!emptyCells.length) {\n      throw new Error('no empty cells');\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex]; // [1, 3]\n  }\n\n  moveLeft() {\n    const isCollapsed = this.collapseCells();\n    const isMoved = this.moveCells();\n\n    if (isCollapsed || isMoved) {\n      const [row, col] = this.randomEmptyCell();\n\n      this.field[row][col] = Math.random() >= 0.9 ? 4 : 2;\n    }\n\n    this.havePossibleMove();\n  }\n\n  moveRight() {\n    this.rotateField().rotateField();\n    this.moveLeft();\n    this.rotateField().rotateField();\n  }\n\n  moveTop() {\n    this.rotateField().rotateField().rotateField();\n    this.moveLeft();\n    this.rotateField();\n  }\n\n  moveBottom() {\n    this.rotateField();\n    this.moveLeft();\n    this.rotateField().rotateField().rotateField();\n  }\n\n  moveCells() {\n    let isMoved = false;\n\n    this.field.forEach(row => {\n      let emptyCell = row.findIndex(el => el === 0);\n\n      if (emptyCell < 0) {\n        return;\n      }\n\n      for (let i = emptyCell + 1; i < row.length; i++) {\n        if (!row[i]) {\n          continue;\n        }\n\n        isMoved = true;\n        row[emptyCell] = row[i];\n        row[i] = 0;\n        emptyCell++;\n      }\n    });\n\n    return isMoved;\n  }\n\n  collapseCells() {\n    let wasCollapsed = false;\n\n    this.field.forEach(row => {\n      let index = row.findIndex(el => el !== 0);\n\n      if (index === -1) {\n        return;\n      }\n\n      for (let i = index + 1; i < this.field.length; i++) {\n        if (!row[i]) {\n          continue;\n        }\n\n        if (row[i] === row[index]) {\n          wasCollapsed = true;\n          row[index] *= 2;\n          row[i] = 0;\n\n          if (row[index] === 2048) {\n            this.state = 'win';\n          }\n\n          this.score += row[index];\n\n          index = row.findIndex((el, j) => el !== 0 && j > i);\n\n          if (index === -1) {\n            return;\n          }\n\n          i = index;\n        }\n        index = i;\n      }\n    });\n\n    return wasCollapsed;\n  }\n\n  rotateField() {\n    for (let i = 0; i < this.field.length; i++) {\n      for (let j = i + 1; j < this.field[0].length; j++) {\n        [this.field[i][j], this.field[j][i]]\n          = [this.field[j][i], this.field[i][j]];\n      }\n    }\n\n    this.field.forEach(row => row.reverse());\n\n    return this;\n  }\n\n  havePossibleMove() {\n    if (this.cellsValues().some(cell => cell === 0)) {\n      return;\n    }\n\n    for (let row = 0; row < this.field.length; row++) {\n      for (let col = 0; col < this.field[0].length; col++) {\n        const equalRight = this.field[row][col] === this.field[row][col + 1];\n        const equalBottom = this.field[row][col]\n          === (this.field[row + 1] ? this.field[row + 1][col] : undefined);\n\n        if (equalRight || equalBottom) {\n          return;\n        }\n      }\n    }\n\n    this.state = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"]}